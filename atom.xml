<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>i&#39;m iwill</title>
  
  <subtitle>Mr. Míng</subtitle>
  <link href="https://iwill.im/atom.xml" rel="self"/>
  
  <link href="https://iwill.im/"/>
  <updated>2022-09-06T13:13:35.774Z</updated>
  <id>https://iwill.im/</id>
  
  <author>
    <name>iwill</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ScriptCalculator - 不只是程序员的计算器</title>
    <link href="https://iwill.im/2022/07/08/script-calculator/"/>
    <id>https://iwill.im/2022/07/08/script-calculator/</id>
    <published>2022-07-08T02:20:00.000Z</published>
    <updated>2022-09-06T13:13:35.774Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>ScriptCalculator: <a href="https://iwill.im/ScriptCalculator/">https://iwill.im/ScriptCalculator/</a><br /><br>GitHub Repo: <a href="https://github.com/iwill/ScriptCalculator">https://github.com/iwill/ScriptCalculator</a></p></blockquote><p><a href="https://iwill.im/ScriptCalculator/">ScriptCalculator</a> 是我为了满足个人需求开发的一款计算器。</p><p>先看效果，假设某同学月薪 10w，用 ScriptCalculator 计算一下他的税后收入（为了便于演示，这里不考虑五险一金、绩效、ESPP、加班费、餐补等）：</p><blockquote><p><a href="https://iwill.im/ScriptCalculator/#eyJkZWNpbWFsUGxhY2VzIjo0LCJzY3JpcHQiOiIjIOS4queojuiuoeeul1xuXG4vLyDnurPnqI7ph5Hpop0gPSDnqI7liY3mlLblhaUgKiDpgILlupTnqI7njocgLSDpgJ%2FnrpfmiaPpmaTmlbBcbi8vIOi2hei%2FhyA5NjAwMDAg55qE6YOo5YiG6YCC5bqU56iO546HIDQ1JeOAgemAn%2Beul%2BaJo%2BmZpOaVsCAxODE5MjBcbi8vIGh0dHBzOi8vamNjLmJqbXUuZWR1LmNuL2RvY3MvMjAyMjAxMDQxMTM2MDczOTE2ODgucGRmXG5cbnc6IDEwMDAwXG5cbjEwICogdyAvLyDmr4%2FmnIjolqrotYRcbnRhdGFsOiAgICAgICAgICAgKiAxMiAvLyDmr4%2FlubTmlLblhaVcbnRheDogKiA0NSUgLSAxODE5MjAgLy8g57y057qz5Liq56iOXG5cbnRhdGFsIC0gJCAvLyDnqI7lkI7mlLblhaVcbi8gdyAvLyDljZXkvY3kuIflhYNcblxudGF4IC8gdGF0YWwgJSUgLy8g5a6e6ZmF57qz56iO5q%2BU5L6LXG5cbiJ9-1000275-1000275">查看计算脚本 or 算算我的 👀</a></p></blockquote><p><img src="/images/script-calculator.png" alt="script-calculator.png"></p><span id="more"></span><p>最初的需求是想保留计算过程、能展示中间结果，能随时修改数据和计算逻辑，计算结果实时更新，必要的地方可以加备注。好像很正常的需求，但找了好久就没发现哪个计算器能满足，所以只能写代码计算。</p><p>开始我用 Chrome 控制台写 JavaScript 比较多，随手就能拿过来写，但问题是输入不方便、输出结果也不直观，要在文本编辑器和控制台之间来回拷贝代码和计算结果。Swift Playgrounds 的结果展示很友好，但代码里多少还是夹杂了数据之外的东西，还要要操心数据类型，而且 Xcode 也不是很轻量。气氛烘托到位，就是时候出手了。</p><p>ScriptCalculator 基于网页，核心思想是解析输入的计算脚本，通过预处理变成 JavaScript 代码，然后用 <code>eval()</code> 运行代码完成计算，最后模仿 Swift Playgrounds 输出结果。后来边用边迭代，逐步支持了自定义变量和函数、百分数和各种进制、位运算和布尔值、折行和注释，以及通过 URL 分享计算脚本等丰富的特性。</p><p>最终，脚本语法简洁、功能强大，充分地利用了 JavaScript 语言的多种特性。（至少我自己）用起来非常顺手，舒坦！</p><p>这里有 <a href="https://iwill.im/ScriptCalculator/#eyJzY3JpcHQiOiIjIOWKn%2BiDvea8lOekulxuXG4jIyDln7rmnKzov5Dnrpflj4rojrflj5blj5jph49cblxuMiArIDRcbi0gM1xuLy8g6KGM6aaW5piv6L%2BQ566X56ym55qE77yM5YmN6Z2i6Ieq5Yqo5aGr5YWF5LiK5LiA6KGM6K6h566X57uT5p6cXG5cbiQwIC8gMlxuLy8gJG4g6KGo56S656ysIG4g5Liq57uT5p6cXG5cbjEwICUgJFxuPSAxXG4vLyAkIOihqOekuuS4iuS4gOS4que7k%2BaenO%2B8iOS4jeaYr%2BS4iuS4gOihjO%2B8iVxuXG4jIOeZvuWIhuaVsFxuXG4xMCVcbjEgKyAxMCVcblxuIyMg57uT5p6c5Lul55m%2B5YiG5pWw5b2i5byP5bGV56S677yM5LiN5b2x5ZON5a6e6ZmF57uT5p6cXG5cbjAuMSAlJVxuKiAyICAgXG4lJVxuXG4jIyDkuozjgIHlhavjgIHljYHjgIHljYHlha3ov5vliLZcblxuMGIxMFxuMG8xMFxuMTBcbjB4MTBcblxuIyMg57uT5p6c6L2s5LqM6Iez5LiJ5Y2B5YWt6L%2Bb5Yi2XG5cbjMyICMyIFxuIzggXG4jMTBcbiMxNlxuIzMyXG4jMzZcbiRcblxuIyMg5L2N6L%2BQ566XXG5cbjBiMDEgfCAwYjEwICMyXG4wYjEwICYgMGIxMSAjMlxufjBiMDEgIzJcbjBiMDEgXiAwYjExICMyXG5cbjEgPDwgIDAgIzJcbjEgPDwgIDEgIzJcbjEgPDwgIDIgIzJcbjEgPDwgIDQgIzJcbjEgPDwgIDggIzJcbjEgPDwgMTYgIzJcbjEgPDwgMzIgIzJcblxuIyMg5YaF572u5bi46YePXG5cbi8vIOiHqueEtuW4uOaVsOOAgeWchuWRqOeOh%2BOAgem7hOmHkeWIhuWJsuavlFxuRVxuUElcbkdSXG5cbiMjIOWGhee9ruWHveaVsFxuXG4vLyDmnIDlsI8v5aSn5YC844CB5LmY5pa544CB5byA5bmz5pa5XG5taW4obWF4KDEsIDIpLCAzKVxucG93KDIsIDEwKVxuPT0gMiAqKiAxMFxuc3FydCgxMDI0KVxuXG4vLyDlm5voiI3kupTlhaXjgIHlkJHkuIov5ZCR5LiL5Y%2BW5pW077yM5pSv5oyB5oyH5a6a5bCP5pWw54K55ZCOL%2BWJjeS9jeaVsFxuXzY2NjogMjAwMCAvIDNcbnJvdW5kKF82NjYsICAzKVxuZmxvb3IoXzY2NiwgIDIpXG5jZWlsKF82NjYgLyAyLCAgMSlcbnJvdW5kKF82NjYsICAwKVxucm91bmQoXzY2NikgICAgXG5yb3VuZChfNjY2LCAtMSlcbnJvdW5kKF82NjYsIC0yKVxuXG4jIyDoh6rlrprkuYnlj5jph49cblxuYTogMVxuYjogMlxuYSArIGJcblxuIyMg6Ieq5a6a5LmJ5Ye95pWwXG5cbmFkZChhLCBiKTogYSArIGJcbmFkZCgzLCA0KVxuXG4vLyDmlK%2FmjIHmm7Tlhbfor63kuYnljJbnmoQgUk9STyDlvaLlvI%2Flj4LmlbBcbi8vIOihjOWwvuWKoCBgXFxgIOWPr%2BS7peaKmOihjFxuYWRkKHsgYSwgYiB9KTogXFxcbmEgKyBiXG5hZGQoeyBhOiA0LCBiOiA1IH0pXG5cbiJ9-1000000-1000000">丰富的功能演示</a>，不喜欢看文档的可以直接操练起来。</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><h3 id="类型扩展"><a href="#类型扩展" class="headerlink" title="类型扩展"></a>类型扩展</h3><ul><li><p>百分数：支持输入百分数，支持结果以百分数形式展示</p>  <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">10</span>%       // <span class="number">0</span>.<span class="number">1</span></span><br><span class="line"><span class="attribute">10</span> %      // <span class="number">0</span>.<span class="number">1</span></span><br><span class="line"><span class="attribute">10</span>% + <span class="number">1</span>   // <span class="number">0</span>.<span class="number">1</span> + <span class="number">1</span> == <span class="number">1</span>.<span class="number">1</span></span><br><span class="line"><span class="attribute">10</span>% % <span class="number">1</span>   // <span class="number">0</span>.<span class="number">1</span> % <span class="number">1</span> == <span class="number">0</span>.<span class="number">1</span></span><br><span class="line"><span class="attribute">10</span>% - <span class="number">7</span>   // <span class="number">0</span>.<span class="number">1</span> - <span class="number">7</span> == -<span class="number">6</span>.<span class="number">9</span></span><br><span class="line"><span class="attribute">10</span> % (-<span class="number">7</span>) //  <span class="number">10</span> % <span class="number">7</span> == <span class="number">3</span></span><br></pre></td></tr></table></figure><p>  | 需要注意百分号与取余运算符的使用差异</p></li><li><p>进制：支持输入二、八、十、十六进制数字，支持结果以二至三十六进制形式展示</p><p>  结果默认以十进制形式展示：</p>  <figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0b10</span>   // <span class="number">2</span></span><br><span class="line"><span class="number">0o10</span>   // <span class="number">8</span></span><br><span class="line">  <span class="number">10</span>   // <span class="number">10</span></span><br><span class="line"><span class="number">0x10</span>   // <span class="number">16</span></span><br></pre></td></tr></table></figure><p>  末尾加 <code>#&lt;进制数字&gt;</code> 可以切换为展示进制，但并不改变实际结果，支持二至三十六进制：</p>  <figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里每一行都是获取上一行的结果、转换进制展示</span></span><br><span class="line"><span class="number">32</span> <span class="meta">#2  <span class="comment">// 0b100000</span></span></span><br><span class="line">   <span class="meta">#8  <span class="comment">// 0o40</span></span></span><br><span class="line">   <span class="meta">#10 <span class="comment">// 32</span></span></span><br><span class="line">   <span class="meta">#16 <span class="comment">// 0x20</span></span></span><br><span class="line">   <span class="meta">#32 <span class="comment">// 10</span></span></span><br><span class="line">   <span class="meta">#36 <span class="comment">// W</span></span></span><br><span class="line"> $     <span class="comment">// 32</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h3><ul><li>基础运算：支持 <code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>、<code>%</code>（取余）、<code>(</code> 和 <code>)</code> 等运算符</li><li>比较运算：支持 <code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code> 和 <code>==</code> 等运算符</li><li>逻辑运算：支持布尔类型，支持 <code>&amp;&amp;</code>、<code>||</code>、<code>!</code> 和三目等运算符 <code>?:</code></li><li>位运算：支持 <code>&amp;</code>、<code>|</code>、<code>~</code>、<code>^</code>、<code>&lt;&lt;</code> 和 <code>&gt;&gt;</code>等运算符</li></ul><h3 id="常量、变量"><a href="#常量、变量" class="headerlink" title="常量、变量"></a>常量、变量</h3><ul><li><p>变量：</p><ul><li>行首为运算符时在前面自动填入上一行结果</li><li>使用 <code>$n</code> 获取第 <code>n</code> 个结果</li><li>使用 <code>$</code> 获取上一个结果（不是上一行）</li></ul></li><li><p>JavaScript 常量、方法：</p><p>  允许访问 JavaScript 中 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math"><code>Math</code></a> 和 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number"><code>Number</code></a> 的属性和方法。</p><p>  <code>Math</code> 的属性可以作为常量使用：</p>  <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="attribute">E</span> // <span class="number">2</span>.<span class="number">718281828459045</span></span><br><span class="line"><span class="attribute">PI</span> // <span class="number">3</span>.<span class="number">141592653589793</span></span><br></pre></td></tr></table></figure><p>  <code>Math</code> 的方法可以直接作为函数使用：</p>  <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">min</span>(max(<span class="number">1</span>, <span class="number">2</span>), <span class="number">3</span>) // <span class="number">2</span></span><br><span class="line">       <span class="attribute">pow</span>(<span class="number">2</span>, <span class="number">10</span>) // <span class="number">1024</span></span><br><span class="line">       <span class="attribute">sqrt</span>(<span class="number">1024</span>) // <span class="number">32</span></span><br></pre></td></tr></table></figure><p>  <code>Number</code> 的属性可以通过 <code>Number.</code> 形式访问：</p>  <figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.MAX_SAFE_INTEGER <span class="comment">// 9007199254740991</span></span><br><span class="line">  == <span class="built_in">pow</span>(<span class="number">2</span>, <span class="number">53</span>) - <span class="number">1</span>     <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Number</span>.MIN_SAFE_INTEGER <span class="comment">// -9007199254740991</span></span><br><span class="line">  == - (<span class="built_in">pow</span>(<span class="number">2</span>, <span class="number">53</span>) - <span class="number">1</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p>扩展的函数：</p><p>  <code>Math</code> 的小数截取方法只能截取整数，想要截取小数会比较麻烦，<code>toFixed()</code> 方法又不够灵活、而且输出的是字符串格式：</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">2000</span> / <span class="number">3</span> * <span class="number">100</span>) / <span class="number">100</span> <span class="comment">//  666.67  | Math 的 round() 方法</span></span><br><span class="line">(<span class="number">2000</span> / <span class="number">3</span>).<span class="title function_">toFixed</span>(<span class="number">2</span>)            <span class="comment">// &quot;666.66&quot; | Number 实例的 toFixed() 方法</span></span><br></pre></td></tr></table></figure><p>  扩展的函数支持可选的第二个参数就比较方便了，并且还支持整数部分的取舍：</p>  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">_666: <span class="number">2000</span> / <span class="number">3</span>  <span class="comment">// 666.6666666666666</span></span><br><span class="line"><span class="function"><span class="title">round</span><span class="params">(_666, <span class="number">3</span>)</span></span>  <span class="comment">// 666.667</span></span><br><span class="line"><span class="function"><span class="title">floor</span><span class="params">(_666, <span class="number">2</span>)</span></span>  <span class="comment">// 666.66</span></span><br><span class="line"><span class="function"><span class="title">ceil</span><span class="params">(_666 / <span class="number">2</span>, <span class="number">1</span>)</span></span> <span class="comment">// 333.4</span></span><br><span class="line"><span class="function"><span class="title">round</span><span class="params">(_666, <span class="number">0</span>)</span></span>  <span class="comment">// 667</span></span><br><span class="line"><span class="function"><span class="title">round</span><span class="params">(_666)</span></span>     <span class="comment">// 667</span></span><br><span class="line"><span class="function"><span class="title">round</span><span class="params">(_666, -<span class="number">1</span>)</span></span> <span class="comment">// 670</span></span><br><span class="line"><span class="function"><span class="title">round</span><span class="params">(_666, -<span class="number">2</span>)</span></span> <span class="comment">// 700</span></span><br></pre></td></tr></table></figure></li><li><p>自定义变量</p><p>  定义及使用：</p>  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span>: <span class="number">1</span>  <span class="comment">// 1</span></span><br><span class="line"><span class="selector-tag">b</span>: <span class="number">2</span>  <span class="comment">// 2</span></span><br><span class="line"><span class="selector-tag">a</span> + <span class="selector-tag">b</span> <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></li><li><p>自定义函数</p><p>  定义及调用：</p>  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">add</span><span class="params">(a, b)</span></span>: <span class="selector-tag">a</span> + <span class="selector-tag">b</span></span><br><span class="line"><span class="function"><span class="title">add</span><span class="params">(<span class="number">3</span>, <span class="number">4</span>)</span></span> <span class="comment">// 7</span></span><br></pre></td></tr></table></figure><p>  支持更具语义化的 RORO 形式参数：</p>  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">add</span><span class="params">(&#123; a, b &#125;)</span></span>: \</span><br><span class="line"><span class="selector-tag">a</span> + <span class="selector-tag">b</span></span><br><span class="line"><span class="function"><span class="title">add</span><span class="params">(&#123; a: <span class="number">4</span>, b: <span class="number">5</span> &#125;)</span></span> <span class="comment">// 9</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="空白、注释"><a href="#空白、注释" class="headerlink" title="空白、注释"></a>空白、注释</h3><ul><li>支持任意的空格，便于纵向对齐</li><li>支持任意的空行，空行不影响结果行号</li><li>行尾加 <code>\</code> 可以折行，特别是自定义复杂的函数时可以避免一行过长</li><li>支持 <code>#</code> 和 <code>//</code> 两种形式的注释</li></ul><h2 id="设置、按钮"><a href="#设置、按钮" class="headerlink" title="设置、按钮"></a>设置、按钮</h2><ul><li>decimal：全局结果精确位数</li><li>rounding：全局小数截取方法</li><li>underline：给强迫症删除空格用</li><li>reset：重置设置</li><li>copy：拷贝 <code>注释 + 算式 + 结果</code></li></ul><h2 id="辅助功能"><a href="#辅助功能" class="headerlink" title="辅助功能"></a>辅助功能</h2><ul><li>行号：有计算结果的行显示行号，可用于 <code>$ + 行号</code> 获取指定行结果</li><li>撤销、重做：支持默认的撤销、重做功能</li><li>快捷键：<ul><li><kbd>control</kbd>+<kbd>u</kbd> 单词或选中文本大写</li><li><kbd>control</kbd>+<kbd>shift</kbd>+<kbd>u</kbd> 单词或选中文本小写</li><li><kbd>control</kbd>+<kbd>c</kbd> 首字母大写</li><li><kbd>control</kbd>+<kbd>shift</kbd>+<kbd>c</kbd> 首字母小写</li></ul></li><li>URL Hash：URL Hash 中包含完整计算内容和设置，可前进&#x2F;后退、刷新不丢数据，拷贝 URL 可以分享或备份，重新打开后 100% 还原</li></ul><h2 id="已知问题"><a href="#已知问题" class="headerlink" title="已知问题"></a>已知问题</h2><ul><li><p>暂不支持 <code>BigInt</code></p></li><li><p>“行首为运算符时自动在前面填入上一行结果”导致正负号存在歧义</p><p>  例如：</p>  <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">      <span class="regexp">//</span> exp   got</span><br><span class="line">a:  <span class="number">1</span> <span class="regexp">//</span>  <span class="number">1</span>    <span class="number">1</span></span><br><span class="line">b: -<span class="number">1</span> <span class="regexp">//</span> -<span class="number">1</span>    <span class="number">0</span></span><br><span class="line">c:  <span class="number">1</span> <span class="regexp">//</span>  <span class="number">1</span>    <span class="number">1</span></span><br><span class="line">d: +<span class="number">1</span> <span class="regexp">//</span>  <span class="number">1</span>    <span class="number">2</span></span><br></pre></td></tr></table></figure><p>  解决办法是在带正负号的数字外加括号、或在带正负号的数字前换行：</p>  <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">a</span>:   <span class="number">1</span>  //  <span class="number">1</span></span><br><span class="line"><span class="attribute">b</span>: (-<span class="number">1</span>) // -<span class="number">1</span></span><br><span class="line"><span class="attribute">c</span>:   <span class="number">1</span>  //  <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">d</span>:  +<span class="number">1</span>  //  <span class="number">1</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;ScriptCalculator: &lt;a href=&quot;https://iwill.im/ScriptCalculator/&quot;&gt;https://iwill.im/ScriptCalculator/&lt;/a&gt;&lt;br /&gt;&lt;br&gt;GitHub Repo: &lt;a href=&quot;https://github.com/iwill/ScriptCalculator&quot;&gt;https://github.com/iwill/ScriptCalculator&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://iwill.im/ScriptCalculator/&quot;&gt;ScriptCalculator&lt;/a&gt; 是我为了满足个人需求开发的一款计算器。&lt;/p&gt;
&lt;p&gt;先看效果，假设某同学月薪 10w，用 ScriptCalculator 计算一下他的税后收入（为了便于演示，这里不考虑五险一金、绩效、ESPP、加班费、餐补等）：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://iwill.im/ScriptCalculator/#eyJkZWNpbWFsUGxhY2VzIjo0LCJzY3JpcHQiOiIjIOS4queojuiuoeeul1xuXG4vLyDnurPnqI7ph5Hpop0gPSDnqI7liY3mlLblhaUgKiDpgILlupTnqI7njocgLSDpgJ%2FnrpfmiaPpmaTmlbBcbi8vIOi2hei%2FhyA5NjAwMDAg55qE6YOo5YiG6YCC5bqU56iO546HIDQ1JeOAgemAn%2Beul%2BaJo%2BmZpOaVsCAxODE5MjBcbi8vIGh0dHBzOi8vamNjLmJqbXUuZWR1LmNuL2RvY3MvMjAyMjAxMDQxMTM2MDczOTE2ODgucGRmXG5cbnc6IDEwMDAwXG5cbjEwICogdyAvLyDmr4%2FmnIjolqrotYRcbnRhdGFsOiAgICAgICAgICAgKiAxMiAvLyDmr4%2FlubTmlLblhaVcbnRheDogKiA0NSUgLSAxODE5MjAgLy8g57y057qz5Liq56iOXG5cbnRhdGFsIC0gJCAvLyDnqI7lkI7mlLblhaVcbi8gdyAvLyDljZXkvY3kuIflhYNcblxudGF4IC8gdGF0YWwgJSUgLy8g5a6e6ZmF57qz56iO5q%2BU5L6LXG5cbiJ9-1000275-1000275&quot;&gt;查看计算脚本 or 算算我的 👀&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/script-calculator.png&quot; alt=&quot;script-calculator.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="js" scheme="https://iwill.im/tags/js/"/>
    
    <category term="calculator" scheme="https://iwill.im/tags/calculator/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 定义 class 的方式</title>
    <link href="https://iwill.im/2022/04/07/class-js/"/>
    <id>https://iwill.im/2022/04/07/class-js/</id>
    <published>2022-04-07T02:45:05.000Z</published>
    <updated>2022-07-13T04:09:58.299Z</updated>
    
    <content type="html"><![CDATA[<p>自从转了 iOS 写 JavaScript 就越来越少了，即使写也没有复杂到要定义个类。我一直知道 JavaScript 也支持定义 <code>class</code> 了，但是直到前两天才偶然看到了 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/class#syntax">JavaScript 定义 <code>class</code> 的语法</a>，我惊奇地发现写法居然和我的 <code>$class.js</code> 不能说一毛一样，但实在是太像了！</p><span id="more"></span><p>zszz，早期的 JavaScript 是不支持定义 <code>class</code> 的，要拿 <code>function</code> 和 <code>prototype</code> 组装。画风大概是这样的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">friends</span> = [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">    <span class="attr">makeFriend</span>: <span class="keyword">function</span>(<span class="params">person</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">friends</span>.<span class="title function_">push</span>(person.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">name, grade</span>) &#123;</span><br><span class="line">    <span class="comment">// super.constructor()</span></span><br><span class="line">    <span class="title class_">Person</span>.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">grade</span> = grade;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">makeFriend</span> = <span class="keyword">function</span>(<span class="params">person</span>) &#123;</span><br><span class="line">    <span class="comment">// super.makeFriend()</span></span><br><span class="line">    <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">makeFriend</span>.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ming = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;ming&quot;</span>)</span><br><span class="line">    nina = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;nina&quot;</span>);</span><br><span class="line"></span><br><span class="line">ming.<span class="title function_">makeFriend</span>(nina);</span><br><span class="line">nina.<span class="title function_">makeFriend</span>(ming);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ming.<span class="property">friends</span>); <span class="comment">// [&#x27;nina&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nina.<span class="property">friends</span>); <span class="comment">// [&#x27;ming&#x27;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>很丑！所以当时很多框架都给出了不同形式的封装，但是没有一个我喜欢的，比如现在唯一能想到的 Prototype（停更于 2015 年）<a href="http://prototypejs.org/learn/class-inheritance">使用</a> 和 <a href="https://github.com/prototypejs/prototype/blob/master/src/prototype/lang/class.js#L43">实现</a> 都没好到哪去。并且我倾向于写原生的 JavaScript，于是自己写了一个 <a href="https://gist.github.com/iwill/2303057"><code>$class.js</code></a>。</p><p>最初 1.0 版本的 <code>$class.js</code> 极其精简，只有 4 行代码！但很好地满足了核心需求：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$class</span> = <span class="keyword">function</span>(<span class="params">src</span>) &#123;</span><br><span class="line">    src.<span class="property">constructor</span>.<span class="property"><span class="keyword">prototype</span></span> = src;</span><br><span class="line">    <span class="keyword">return</span> src.<span class="property">constructor</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>$class.js</code> 1.0 的使用，看起来是不是好多了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Person</span> = $class(&#123;</span><br><span class="line">    <span class="attr">constructor</span>: <span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">friends</span> = [];</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">makeFriend</span>: <span class="keyword">function</span>(<span class="params">person</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">friends</span>.<span class="title function_">push</span>(person.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ming = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;ming&quot;</span>)</span><br><span class="line">    nina = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;nina&quot;</span>);</span><br><span class="line"></span><br><span class="line">ming.<span class="title function_">makeFriend</span>(nina);</span><br><span class="line">nina.<span class="title function_">makeFriend</span>(ming);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ming.<span class="property">friends</span>); <span class="comment">// [&#x27;nina&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nina.<span class="property">friends</span>); <span class="comment">// [&#x27;ming&#x27;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>后来 2.0 版本的 <code>$class.js</code> 支持了继承、以及调用父类构造方法和方法，代码依然不算多：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$class</span> = <span class="keyword">function</span> <span class="title function_">$class</span>(<span class="params">source, SuperClass</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="title class_">SuperClass</span> = <span class="title class_">SuperClass</span> || <span class="title class_">Object</span>;</span><br><span class="line">    source = source || &#123;&#125;;</span><br><span class="line">    source.<span class="property">constructor</span> = source.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;constructor&quot;</span>) ? source.<span class="property">constructor</span> : <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">SuperClass</span>.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">Class</span> = source.<span class="property">constructor</span>;</span><br><span class="line">    <span class="title class_">Class</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">SuperClass</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> each <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="title class_">Class</span>.<span class="property"><span class="keyword">prototype</span></span>[each] = source[each]; <span class="comment">// include `constructor`</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Class</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>$class.js</code> 2.0 的使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Person</span> = $class(&#123;</span><br><span class="line">    <span class="attr">constructor</span>: <span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">friends</span> = [];</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">makeFriend</span>: <span class="keyword">function</span>(<span class="params">person</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">friends</span>.<span class="title function_">push</span>(person.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Student</span> = $class(&#123;</span><br><span class="line">    <span class="attr">constructor</span>: <span class="keyword">function</span>(<span class="params">name, grade</span>) &#123;</span><br><span class="line">        <span class="comment">// super.constructor()</span></span><br><span class="line">        <span class="title class_">Person</span>.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">grade</span> = grade;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">makeFriend</span>: <span class="keyword">function</span>(<span class="params">person</span>) &#123;</span><br><span class="line">        <span class="comment">// super.makeFriend()</span></span><br><span class="line">        <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">makeFriend</span>.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="title class_">Person</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ming = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;ming&quot;</span>)</span><br><span class="line">    nina = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;nina&quot;</span>);</span><br><span class="line"></span><br><span class="line">ming.<span class="title function_">makeFriend</span>(nina);</span><br><span class="line">nina.<span class="title function_">makeFriend</span>(ming);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ming.<span class="property">friends</span>); <span class="comment">// [&#x27;nina&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nina.<span class="property">friends</span>); <span class="comment">// [&#x27;ming&#x27;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>JavaScript 定义 <code>class</code> 的写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Person</span> = <span class="keyword">class</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">friends</span> = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">makeFriend</span>(<span class="params">person</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">friends</span>.<span class="title function_">push</span>(person.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Student</span> = <span class="keyword">class</span> <span class="title class_">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, grade</span>) &#123;</span><br><span class="line">        <span class="comment">// super constructor</span></span><br><span class="line">        <span class="variable language_">super</span>(...<span class="variable language_">arguments</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">grade</span> = grade;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">makeFriend</span>(<span class="params">person</span>) &#123;</span><br><span class="line">        <span class="comment">// super method</span></span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">makeFriend</span>(...<span class="variable language_">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ming = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;ming&quot;</span>)</span><br><span class="line">    nina = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;nina&quot;</span>);</span><br><span class="line"></span><br><span class="line">ming.<span class="title function_">makeFriend</span>(nina);</span><br><span class="line">nina.<span class="title function_">makeFriend</span>(ming);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ming.<span class="property">friends</span>); <span class="comment">// [&#x27;nina&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nina.<span class="property">friends</span>); <span class="comment">// [&#x27;ming&#x27;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>所以我想说的是：我对代码的品味好像还可以，昂 😎</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;自从转了 iOS 写 JavaScript 就越来越少了，即使写也没有复杂到要定义个类。我一直知道 JavaScript 也支持定义 &lt;code&gt;class&lt;/code&gt; 了，但是直到前两天才偶然看到了 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/class#syntax&quot;&gt;JavaScript 定义 &lt;code&gt;class&lt;/code&gt; 的语法&lt;/a&gt;，我惊奇地发现写法居然和我的 &lt;code&gt;$class.js&lt;/code&gt; 不能说一毛一样，但实在是太像了！&lt;/p&gt;</summary>
    
    
    
    
    <category term="js" scheme="https://iwill.im/tags/js/"/>
    
    <category term="class" scheme="https://iwill.im/tags/class/"/>
    
  </entry>
  
  <entry>
    <title>升级 Hexo</title>
    <link href="https://iwill.im/2022/02/09/updating-hexo/"/>
    <id>https://iwill.im/2022/02/09/updating-hexo/</id>
    <published>2022-02-09T13:46:17.000Z</published>
    <updated>2022-02-09T14:46:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>2014 年搭建了博客，然后就没再写 🤪</p><p>博客被我用来发布一个非常强大的程序员专用计算器 <a href="/ScriptCalculator/">ScriptCalculator</a>，详细介绍看这里 <a href="https://github.com/iwill/ScriptCalculator">GitHub</a>。</p><p>刚刚更新了个小功能，结果发现 Hexo 部署后博客页面都变空白了，原因是 <a href="https://alanlee.fun/2021/02/28/hexo-empty-html/">Hexo</a> (3.9.0) 版本太低，与 Node (17.4.0) 不匹配，所以肯定要升级 Hexo 了。居然挺麻烦的，又没找到官方文档，还好找到了个靠谱的 <a href="https://lanvnal.com/2020/02/16/hexo-ban-ben-sheng-ji/">博客</a>，这里记录一下，以备多年后再次升级用 🙈</p><span id="more"></span><ol><li>升级 Hexo</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">查看 Hexo 版本</span></span><br><span class="line">hexo v</span><br><span class="line"><span class="meta"># </span><span class="language-bash">升级 Hexo</span></span><br><span class="line">npm i hexo-cli -g</span><br><span class="line"><span class="meta"># </span><span class="language-bash">确认 Hexo 版本</span></span><br><span class="line">hexo v</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">安装 npm-check</span></span><br><span class="line">npm install -g npm-check</span><br><span class="line"><span class="meta"># </span><span class="language-bash">检查 npm 过期的、错误的、没有用到的依赖，支持 `-g` 参数</span></span><br><span class="line">npm-check</span><br><span class="line"><span class="meta"># </span><span class="language-bash">根据提示需要执行 update，但要忽略 Hexo 及相关扩展没有用到提示，不要卸载</span></span><br><span class="line">npm-check -u</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">安装 npm-upgrade</span></span><br><span class="line">npm install -g npm-upgrade</span><br><span class="line"><span class="meta"># </span><span class="language-bash">升级 npm modules，同样支持 `-g` 参数</span></span><br><span class="line">npm-upgrade</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">升级 npm packages</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">博客说这里可能遇到 `xcodebuild` 相关的错误，升级就好了，我一直追着升，所以并没有遇到</span></span><br><span class="line">npm update -g</span><br><span class="line">npm update --save</span><br></pre></td></tr></table></figure><ol start="2"><li>升级配置</li></ol><p>发布时遇到提示不支持用户名+密码方式 push 代码，所以 <code>_config.yml</code> 中的 <code>repo</code> 要改为 <code>ssh</code> URL：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">http://iwill.github.io/</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:iwill/iwill.github.io.git</span></span><br></pre></td></tr></table></figure><p>然后，一切又完好如初 😋</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;2014 年搭建了博客，然后就没再写 🤪&lt;/p&gt;
&lt;p&gt;博客被我用来发布一个非常强大的程序员专用计算器 &lt;a href=&quot;/ScriptCalculator/&quot;&gt;ScriptCalculator&lt;/a&gt;，详细介绍看这里 &lt;a href=&quot;https://github.com/iwill/ScriptCalculator&quot;&gt;GitHub&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;刚刚更新了个小功能，结果发现 Hexo 部署后博客页面都变空白了，原因是 &lt;a href=&quot;https://alanlee.fun/2021/02/28/hexo-empty-html/&quot;&gt;Hexo&lt;/a&gt; (3.9.0) 版本太低，与 Node (17.4.0) 不匹配，所以肯定要升级 Hexo 了。居然挺麻烦的，又没找到官方文档，还好找到了个靠谱的 &lt;a href=&quot;https://lanvnal.com/2020/02/16/hexo-ban-ben-sheng-ji/&quot;&gt;博客&lt;/a&gt;，这里记录一下，以备多年后再次升级用 🙈&lt;/p&gt;</summary>
    
    
    
    
    <category term="hexo" scheme="https://iwill.im/tags/hexo/"/>
    
    <category term="blog" scheme="https://iwill.im/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://iwill.im/2015/08/28/hello-world/"/>
    <id>https://iwill.im/2015/08/28/hello-world/</id>
    <published>2015-08-28T10:14:42.000Z</published>
    <updated>2015-08-28T10:14:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="http://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="http://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="http://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="http://hexo.io/docs/deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;http://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;http://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;http://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>使用 Hexo 搭建 GitHub Pages</title>
    <link href="https://iwill.im/2014/04/20/blogging-with-hexo/"/>
    <id>https://iwill.im/2014/04/20/blogging-with-hexo/</id>
    <published>2014-04-20T04:35:58.000Z</published>
    <updated>2022-02-09T14:46:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>2009 年 <a href="https://github.com/zigzag">Zigzag</a> 就教了我怎么用 <a href="https://pages.github.com/">GitHub Pages</a> 写博客 —— 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a> 撰写、转成 HTML、发布到 GitHub。当时觉得很酷，可后来一直没写 …. 现在他去天堂写代码已经快满 4 年了，为了避免被我对不起的 Zig 带走，上周末终于搭起自己的博客 <a href="/" title="iwill">iwill.im</a>。</p><p>看到我订阅的博客多半是用 <a href="http://octopress.org/">Octopress</a> 搭建的，所以认定这是个高大上。但是貌似是 XCode 升级到 5.1.1 导致 Ruby 的一些东西不正常了，一直安装失败，GitHub Pages 推荐的 <a href="http://jekyllrb.com/" title="Jekyll &bull; Simple, blog-aware, static sites">Jekyll</a> 也一样。折腾大半天，非 Ruby Fan 实在无法坚持了，装 B 不成、最终选了 <a href="http://hexo.io/">Hexo</a> [hekso] - <code>A fast, simple &amp; powerful blog framework, powered by Node.js</code>，与前者的使用很相似。不熟悉 JavaScript 也没关系，只要不改模版基本不会碰到 JavaScript。</p><span id="more"></span><h2 id="安装-Node-js-amp-NPM"><a href="#安装-Node-js-amp-NPM" class="headerlink" title="安装 Node.js &amp; NPM"></a>安装 Node.js &amp; NPM</h2><p>首先建议安装 <a href="http://brew.sh/" title="The missing package manager for OS X">Homebrew</a> - <code>The missing package manager for OS X</code>。感觉叫 <code>missing</code> 的都是极品，比如 <a href="http://macromates.com/" title="The missing editor for Mac OS X">TextMate</a> - <code>The missing editor for Mac OS X</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -e <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>安装 <a href="http://nodejs.org/">Node.js</a> - 服务端的 JavaScript，以及 <a href="https://npmjs.org/" title="Node Packaged Modules">npm</a> - Node Packaged Modules。npm 是前者的 Package Manager，会随 Node.js 一同安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo -g <span class="comment"># 安装 Hexo</span></span><br><span class="line">hexo init iwill.im &amp;&amp; <span class="built_in">cd</span> iwill.im <span class="comment"># 初始化 Workspace，名字随意</span></span><br><span class="line">hexo generate <span class="comment"># 从 Markdown 生成静态文件，初始化时会生成一个 Hello World</span></span><br><span class="line">hexo server <span class="comment"># 启动本地 Server</span></span><br></pre></td></tr></table></figure><p>可以访问 <a href="http://localhost:4000/">http://localhost:4000/</a> 查看效果，修改 Markdown 无需重新 Server。</p><p>Hexo Workspace 的 <a href="http://hexo.io/docs/setup.html">目录结构</a> 如下，其中 <code>_config.yml</code> 是 <a href="http://hexo.io/docs/configuration.html" title="Configuration | Hexo">配置文件</a>：</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── <span class="variable">_config</span>.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── scripts</span><br><span class="line">├── source</span><br><span class="line">|   ├── <span class="variable">_drafts</span></span><br><span class="line">|   └── <span class="variable">_posts</span></span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><p>建议随时备份 Hexo Workspace，GitLab、GitHub 或者 Dropbox，这有 Hexo 的 <a href="https://github.com/hexojs/hexo/blob/master/.gitignore">.gitignore</a>。</p><p>Hexo 的命令也很简单，可以通过 <code>hexo help</code>、<code>hexo help command</code> 查看帮助，下面是最常用的几个命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo n [draft] <span class="string">&quot;blog-title&quot;</span> [-s <span class="string">&quot;file-name&quot;</span>] <span class="comment"># n - new，新建博客/草稿</span></span><br><span class="line">hexo p <span class="string">&quot;blog-title&quot;</span> <span class="comment"># p - publish，发布草稿</span></span><br><span class="line">hexo s -d <span class="comment"># s - server、-d - draft，启动本地 Server，并预览草稿</span></span><br><span class="line">hexo d -g <span class="comment"># d - deploy、-g - generate，从 Markdown 生成静态文件，然后发布到 GitHub Pages</span></span><br></pre></td></tr></table></figure><p>更多参考 <a href="http://hexo.io/docs/" title="Documentation | Hexo">Hexo Documentation</a>。</p><h2 id="Hexo-插件"><a href="#Hexo-插件" class="headerlink" title="Hexo 插件"></a>Hexo 插件</h2><p>Hexo 天生支持 <a href="http://disqus.com/" title="Disqus &ndash; The Web&rsquo;s Community of Communities">DISQUS</a> 的评论功能，在 <code>_config.yml</code> 中设置 <code>disqus_shortname</code> 即可。</p><p>我现在用到的插件有 <a href="https://github.com/hexojs/hexo-util">Util</a>、<a href="https://github.com/wsk3201/hexo-local-image">Local Image</a>、<a href="https://github.com/hexojs/hexo-deployer-git">Deployment</a>、<a href="https://github.com/hexojs/hexo-generator-feed">Feed</a>，安装命令：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-util --<span class="built_in">save</span></span><br><span class="line">npm install hexo-<span class="built_in">local</span>-<span class="built_in">image</span> --<span class="built_in">save</span></span><br><span class="line">npm install hexo-deployer-git --<span class="built_in">save</span></span><br><span class="line">npm install hexo-generator-feed --<span class="built_in">save</span></span><br></pre></td></tr></table></figure><p>更多参考 <a href="https://github.com/hexojs/hexo/wiki/Plugins">Hexo Plugins</a>。</p><h2 id="Hexo-模版"><a href="#Hexo-模版" class="headerlink" title="Hexo 模版"></a>Hexo 模版</h2><p>Hexo 的模版不多，我用的是 <a href="http://hexo.io/hexo-theme-light/">Light</a>。</p><p>模版有单独的配置文件 <code>themes/light/_config.yml</code>。在这里可以添加页面、链接，比如 About、RSS，还可以设置 <a href="http://www.addthis.com/" title="Personalized widgets at your finger tips. | AddThis">AddThis</a> 以便分享、传播。</p><p>需要注意的是 Light 默认使用的是 Facebook 的评论，会与 Hexo 里内置的 DISQUS 冲突，导致两者都无法正常显示。鉴于墙的存在，建议把 <code>themes/light/_config.yml</code> 中的 Facebook 相关的设置注释掉，而且 DISQUS 更好用。</p><p>更多参考 <a href="https://github.com/hexojs/hexo/wiki/Themes">Hexo Themes</a>。</p><h2 id="GitHub-Pages"><a href="#GitHub-Pages" class="headerlink" title="GitHub Pages"></a>GitHub Pages</h2><p>现在本地的博客已经搭建起来了，下一步是发布到 GitHub。</p><ol><li><p>在 GitHub 上 <a href="https://github.com/new">创建一个 repo</a>，格式是 <code>username</code>.github.io。</p></li><li><p>打开 Hexo 配置文件 <code>_config.yml</code>，设置博客 url 和 deploy 相关参数：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">http://iwill.github.io/</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/iwill/iwill.github.io.git</span></span><br></pre></td></tr></table></figure></li><li><p>安装 <code>hexo-deployer-git</code>：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git <span class="comment">--save</span></span><br></pre></td></tr></table></figure></li><li><p>发布静态文件到 GitHub：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>访问 <a href="https://github.com/iwill/iwill.github.io">https://github.com/iwill/iwill.github.io</a> 可以看见刚刚发布上去的静态文件，访问 <a href="http://iwill.github.io/">http://iwill.github.io</a> 就可以看见博客了！</p></li></ol><p>更多参考 <a href="https://pages.github.com/">GitHub Pages</a>、<a href="https://hexo.io/docs/deployment.html">Hexo Deployment</a>。</p><h2 id="使用个性域名"><a href="#使用个性域名" class="headerlink" title="使用个性域名"></a>使用个性域名</h2><p>没有域名可以去 <a href="https://domai.nr/">https://domai.nr/</a> 找一个注册，之后做如下设置：</p><ol><li><p>Hexo 的配置文件中的 url 设置为完整的博客地址，如 <code>http://iwill.im/</code>。</p></li><li><p>在 Hexo Workspace 的 Source 目录下创建名为 CNAME 的文本文件、写入域名，如 <code>iwill.im</code>。</p></li><li><p>然后执行 <code>hexo d -g</code> 将上面设置发布到 GitHub Pages 上。</p></li><li><p>在域名服务后台设置域名跳转，注意二级域名 (如 <code>iwill.im</code>) 和三级域名 (如 <code>www.iwill.im</code>、<code>blog.iwill.im</code>) 的设置有所不同，需仔细阅读下面说明进行设置、校验：<br> <a href="https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages#subdomains">https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages#subdomains</a><br> <a href="https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages#apex-domains">https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages#apex-domains</a><br> 这是我的设置：<br><img src="/images/blogging-with-hexo-domain-settings.png" alt="image"></p></li></ol><h2 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h2><p>在文章中插入 <code>&lt;!-- more --&gt;</code> 可以将前面部分生成摘要，否则默认显示全文；</p><p>到这才发现，写博客才是最困难的 …</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;2009 年 &lt;a href=&quot;https://github.com/zigzag&quot;&gt;Zigzag&lt;/a&gt; 就教了我怎么用 &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt; 写博客 —— 使用 &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt; 撰写、转成 HTML、发布到 GitHub。当时觉得很酷，可后来一直没写 …. 现在他去天堂写代码已经快满 4 年了，为了避免被我对不起的 Zig 带走，上周末终于搭起自己的博客 &lt;a href=&quot;/&quot; title=&quot;iwill&quot;&gt;iwill.im&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;看到我订阅的博客多半是用 &lt;a href=&quot;http://octopress.org/&quot;&gt;Octopress&lt;/a&gt; 搭建的，所以认定这是个高大上。但是貌似是 XCode 升级到 5.1.1 导致 Ruby 的一些东西不正常了，一直安装失败，GitHub Pages 推荐的 &lt;a href=&quot;http://jekyllrb.com/&quot; title=&quot;Jekyll &amp;bull; Simple, blog-aware, static sites&quot;&gt;Jekyll&lt;/a&gt; 也一样。折腾大半天，非 Ruby Fan 实在无法坚持了，装 B 不成、最终选了 &lt;a href=&quot;http://hexo.io/&quot;&gt;Hexo&lt;/a&gt; [hekso] - &lt;code&gt;A fast, simple &amp;amp; powerful blog framework, powered by Node.js&lt;/code&gt;，与前者的使用很相似。不熟悉 JavaScript 也没关系，只要不改模版基本不会碰到 JavaScript。&lt;/p&gt;</summary>
    
    
    
    
    <category term="hexo" scheme="https://iwill.im/tags/hexo/"/>
    
    <category term="blog" scheme="https://iwill.im/tags/blog/"/>
    
    <category term="domain" scheme="https://iwill.im/tags/domain/"/>
    
    <category term="github-pages" scheme="https://iwill.im/tags/github-pages/"/>
    
  </entry>
  
</feed>
